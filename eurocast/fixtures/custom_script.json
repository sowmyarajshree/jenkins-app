[
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Job Card",
  "enabled": 1,
  "modified": "2021-05-24 14:55:54.679583",
  "name": "Job Card-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "//fetch start and end time using link\ncur_frm.add_fetch(\"shift_type\",\"start_time\",\"start_time\");\ncur_frm.add_fetch(\"shift_type\",\"end_time\",\"end_time\");"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Work Order",
  "enabled": 1,
  "modified": "2021-05-24 14:52:52.672426",
  "name": "Work Order-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Work Order', {\n    setup: function(frm) {\n        //create button for material request\n\t\tfrm.custom_make_buttons = {\n\t\t\t'Material Request': 'Create Material Request',\n\t\t};\n    },\n    refresh: function(frm) {\n        if (frm.doc.docstatus === 1) {\n            if (frm.doc.status != 'Stopped' && frm.doc.status != 'Completed'){\n                //trigger function on clicking material request button\n                var material_request_btn = frm.add_custom_button(__('Create Material Request'), () => {\n                    frm.trigger(\"create_material_request\");\n                });\n                material_request_btn.addClass('btn-primary');\n                 var operation_btn = frm.add_custom_button(__('Operator Entry'), () => {\n                    //set route operator entry\n                    frappe.set_route(\"Form\", \"Operator Entry\", \"New Operator Entry\");\n                });\n                operation_btn.addClass('btn-primary');\n            }\n        }\n    },\n  /*create_material_request: function (frm, purpose = 'Material Transfer for Manufacture') {\n      frm.trigger(\"show_prompt_for_qty_input\")\n      .then(data =>{\n            return frappe.xcall('eurocast.eurocast.work_order.create_material_request', {\n    \t\t\t\t\t'source_name': frm.doc.name,\n    \t\t\t\t\t'for_qty': data.qty\n    \t\t\t\t});\n      }).then(material_request => {\n            frappe.model.sync(material_request);\n            frappe.set_route('Form', material_request.doctype, material_request.name);\n      });\n  },\n    show_prompt_for_qty_input: function(frm, purpose){\n    \tlet max = 3000;\n    \treturn new Promise((resolve, reject) => {\n    \t\tfrappe.prompt({\n    \t\t\t\tfieldtype: 'Float',\n    \t\t\t\tlabel: __('Qty for {0}', [purpose]),\n    \t\t\t\tfieldname: 'qty',\n    \t\t\t\tdescription: __('Max: {0}', [max]),\n    \t\t\t\tdefault: 0\n    \t\t\t\t}, data => {\n    \t\t\t\tif (data.qty > max) {\n    \t\t\t\t\tfrappe.msgprint(__('Quantity must not be more than {0}', [max]));\n    \t\t\t\t\treject();\n    \t\t\t\t}\n    \t\t\t\tdata.purpose = purpose;\n    \t\t\t\tresolve(data);\n          }, __('Select Quantity'), __('Create'));\n      });\n    }*/\n    create_material_request : function (frm,doc) {\n        //create material request using frappe.call (routes to Material Request)\n        frappe.call({\n\t\t\t\tmethod: \"eurocast.eurocast.work_order.create_material_request\",\n\t\t\t\targs: {\"docname\": frm.doc.name,\n\t\t\t\t},\n\t\t\t\tfreeze: true,\n\t\t\t\tcallback: function(r){\n\t\t\t\t\tif(!r.exc) {\n\t\t\t\t\t\tvar doc = frappe.model.sync(r.message);\n\t\t\t\t\t\tfrappe.set_route(\"Form\", r.message.doctype, r.message.name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n    }\n});\nfrappe.ui.form.on('Work Order', {\n\tvalidate: function(frm) {\n\t    //set work_order_ref_no and work_order_no as docname\n\t\tfrm.set_value(\"work_order_ref_no\",frm.doc.name);\n    \tfrm.set_value(\"work_order_no\",frm.doc.name);\n    \tcur_frm.refresh_field(\"work_order_no\");\n    \tcur_frm.refresh();\n\t}\n});\n\nfrappe.ui.form.on('Work Order', {\n    refresh: function(frm) {\n        //remove button\n        frm.remove_custom_button('Start');\n        frm.remove_custom_button('Create Job Card');\n    }\n});\n\nfrappe.ui.form.on('Work Order', {\n    refresh: function(frm,doc) {\n        //calculate balance qty\n        if(frm.doc.qty){\n            frm.set_value(\"balance_qty\",(frm.doc.qty - frm.doc.produced_qty));\n        }\n    }\n});\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Material Request",
  "enabled": 1,
  "modified": "2021-06-02 15:33:00.630793",
  "name": "Material Request-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "//fetch values based on link field\ncur_frm.add_fetch(\"item_code\",\"stock_uom\",\"uom\");\n\n/*frappe.ui.form.on('Material Request', {\n  setup: function(frm) {\n\t\tfrm.custom_make_buttons = {\n            'Stock Entry': 'Start'\n\t\t};\n  },\n  refresh: function(frm) {\n   if (frm.doc.docstatus===1){\n        var start_btn = frm.add_custom_button(__('Start'), () => {\n          frm.trigger(\"create_stock_entry\");\n        });\n        start_btn.addClass('btn-primary');\n    }\n    /*if(frm.doc.docstatus===1){\n        var finish_btn = frm.add_custom_button(__('Finish'), function() {\n\t\t\tfrm.trigger(\"transfer_stock_entry\");\n\t\t});\n\t\tfinish_btn.addClass('btn-primary');\n    }\n    if (frm.doc.docstatus===1) {\n\t\t\tfrm.trigger('show_progress_for_items');\n\t\t}\n  },\n    create_stock_entry: function(frm,purpose = 'Material Transfer for Manufacture'){\n    frm.trigger(\"show_prompt_for_qty_input\")\n    .then(data =>{\n          return frappe.xcall('eurocast.eurocast.material_request.create_stock_entry', {\n            \"docname\": frm.doc.work_order_ref_no,\n\t\t\t'qty': data.qty\n          });\n    }).then(stock_entry => {\n          frappe.model.sync(stock_entry);\n          frappe.set_route('Form', stock_entry.doctype, stock_entry.name);\n    });\n\n  },\n    show_prompt_for_qty_input: function(frm, purpose){\n    \tlet max = frm.doc.qty;\n    \treturn new Promise((resolve, reject) => {\n    \t\tfrappe.prompt({\n    \t\t\t\tfieldtype: 'Float',\n    \t\t\t\tlabel: __('Qty for {0}', [purpose]),\n    \t\t\t\tfieldname: 'qty',\n    \t\t\t\tdescription: __('Max: {0}', [max]),\n    \t\t\t\tdefault: 0\n    \t\t\t\t}, data => {\n    \t\t\t\tif (data.qty > max) {\n    \t\t\t\t\tfrappe.msgprint(__('Quantity must not be more than {0}', [max]));\n    \t\t\t\t\treject();\n    \t\t\t\t}\n    \t\t\t\tdata.purpose = purpose;\n    \t\t\t\tresolve(data);\n          }, __('Select Quantity'), __('Create'));\n      });\n    },\n    /*\n     show_progress_for_items: function(frm) {\n\t\tvar bars = [];\n\t\tvar message = '';\n\t\tvar added_min = false;\n\n\t\t// produced qty\n\t\tvar title = __('{0} items produced', [frm.doc.produced_qty]);\n\t\tbars.push({\n\t\t\t'title': title,\n\t\t\t'width': (frm.doc.produced_qty / frm.doc.qty * 100) + '%',\n\t\t\t'progress_class': 'progress-bar-success'\n\t\t});\n\t\tif (bars[0].width == '0%') {\n\t\t\tbars[0].width = '0.5%';\n\t\t\tadded_min = 0.5;\n\t\t}\n\t\tmessage = title;\n\t\t// pending qty\n\t\tif(!frm.doc.skip_transfer){\n\t\t\tvar pending_complete = frm.doc.material_transferred_for_manufacturing - frm.doc.produced_qty;\n\t\t\tif(pending_complete) {\n\t\t\t\tvar width = ((pending_complete / frm.doc.qty * 100) - added_min);\n\t\t\t\ttitle = __('{0} items in progress', [pending_complete]);\n\t\t\t\tbars.push({\n\t\t\t\t\t'title': title,\n\t\t\t\t\t'width': (width > 100 ? \"99.5\" : width)  + '%',\n\t\t\t\t\t'progress_class': 'progress-bar-warning'\n\t\t\t\t});\n\t\t\t\tmessage = message + '. ' + title;\n\t\t\t}\n\t\t}\n\t\tfrm.dashboard.add_progress(__('Status'), bars, message);\n\t},\n\ttransfer_stock_entry: function(frm,purpose = 'Manufacture'){\n    frm.trigger(\"show_prompt_for_qty_input\")\n    .then(data =>{\n          return frappe.xcall('eurocast.eurocast.material_request.transfer_stock_entry', {\n            'work_order_id': frm.doc.work_order_ref_no,\n            'purpose': purpose,\n\t\t\t'qty': data.qty\n          });\n    }).then(stock_entry => {\n          frappe.model.sync(stock_entry);\n          frappe.set_route('Form', stock_entry.doctype, stock_entry.name);\n    });\n\n  }\n  create_stock_entry : function (frm,doc) {\n        frappe.call({\n\t\t\t\tmethod: \"eurocast.eurocast.material_request.create_stock_entry\",\n\t\t\t\targs: {\"docname\": frm.doc.work_order_ref_no,\n\t\t\t\t},\n\t\t\t\tfreeze: true,\n\t\t\t\tcallback: function(r){\n\t\t\t\t\tif(!r.exc) {\n\t\t\t\t\t\tvar doc = frappe.model.sync(r.message);\n\t\t\t\t\t\tfrappe.set_route(\"Form\", r.message.doctype, r.message.name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n    }\n});*/\n\n//copy parent values to child table\nfrappe.ui.form.on(\"Material Request\",\"validate\", function(){ \n  for (var i =0; i < cur_frm.doc.items.length; i++){ \n    cur_frm.doc.items[i].wip_warehouse = cur_frm.doc.wip_warehouse} \n    cur_frm.refresh_field('items');\n  });\n\n//copy parent values to child table\nfrappe.ui.form.on(\"Material Request\",\"validate\", function(){ \n  for (var i =0; i < cur_frm.doc.items.length; i++){ \n    cur_frm.doc.items[i].fg_warehouse = cur_frm.doc.fg_warehouse} \n    cur_frm.refresh_field('items');\n  });\n  \n/*frappe.ui.form.on('Material Request', {\n    refresh: function(frm) {\n        frm.remove_custom_button('Stop');\n    }\n});*/\n\nfrappe.ui.form.on(\"Material Request\",{\n    refresh:function(frm,doc){ \n        //copy parent values to child table\n        for (var i =0; i < cur_frm.doc.items.length; i++){ \n            cur_frm.doc.items[i].ordered_qty = cur_frm.doc.produced_qty} \n            cur_frm.refresh_field('items');\n            \n        //set filter for child table\n        if(frm.doc.material_request_type !== \"Purchase\"){\n            frm.fields_dict.items.grid.get_field('item_code').get_query = function(doc,cdt,cdn) {\n    \t\t\t    var d = locals[cdt][cdn];\n    \t\t\t\treturn {\n    \t\t\t\t\tfilters: [\n    \t\t\t\t\t\t[\"Item\",\"is_sales_item\", \"=\", 0]\n    \t\t\t\t\t]\n    \t\t\t\t};\n    \t\t};\n        }\n    },\n    material_request_type:function(frm,doc){\n        //set filter for child table\n        if(frm.doc.material_request_type !== \"Purchase\"){\n            frm.fields_dict.items.grid.get_field('item_code').get_query = function(doc,cdt,cdn) {\n    \t\t\t    var d = locals[cdt][cdn];\n    \t\t\t\treturn {\n    \t\t\t\t\tfilters: [\n    \t\t\t\t\t\t[\"Item\",\"is_sales_item\", \"in\", '0,1']\n    \t\t\t\t\t]\n    \t\t\t\t};\n    \t\t};\n        }\n    }\n});\n\n\n/*frappe.ui.form.on('Material Request Item', {\n\tqty_as_per_stock_uom: function(frm,cdt,cdn) {\n\t\tvar d = locals[cdt][cdn];\n\t\tvar qty = d.qty_as_per_stock_uom * d.conversion_factor;\n\t\tfrappe.model.set_value(cdt,cdn,\"purchase_qty\",qty);\n\t}\n});*/"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Melting Loss",
  "enabled": 1,
  "modified": "2021-05-24 14:55:32.018858",
  "name": "Melting Loss-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Melting Loss', {\n\tvalidate(frm) {\n\t    //calculating melting loss\n\t\tvar wght = frm.doc.weight;\n\t\tvar scr_wgt = frm.doc.scrap_weight;\n\t\tfrm.doc.melting_loss = wght/scr_wgt;\n\t}\n});"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Operator Entry",
  "enabled": 1,
  "modified": "2021-06-22 17:21:10.504808",
  "name": "Operator Entry-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on(\"Operator Entry\", \"refresh\", function(frm){\n    //set filters\n    frm.set_query(\"workstation\", function(doc){\n        return {\n                \"filters\": {\n                    \"operation\": frm.doc.operation\n            }\n        };\n    });\n    frm.set_query(\"operator_name\", function(doc){\n        return {\n                \"filters\": {\n                    \"operation\": frm.doc.operation\n            }\n        };\n    });\n});\n\nfrappe.ui.form.on('Operator Entry', {\n\trefresh(frm) {\n\t    //set filters\n\t\tfrm.fields_dict.operation_details.grid.get_field('work_order').get_query = function(doc,cdt,cdn) {\n\t\t    var d = locals[cdt][cdn];\n\t\t\treturn {\n\t\t\t\tfilters: [\n\t\t\t\t\t[\"Work Order\",\"status\", \"in\", \"Not Started,In Process\"],\n\t\t\t\t\t[\"Work Order\",\"production_item\", \"=\", d.item_code]\n\t\t\t\t]\n\t\t\t};\n\t\t};\n\t\tfrm.fields_dict.operation_details.grid.get_field('item_code').get_query = function(doc,cdt,cdn) {\n\t\t\treturn {\n\t\t\t\tfilters: [\n\t\t\t\t\t[\"Item\",\"item_group\", \"in\", \"Finished Goods,Semi Finished Goods\"],\n\t\t\t\t\t[\"Item\",\"nx_operation\", \"=\", frm.doc.operation],\n\t\t\t\t\t[\"Item\",\"disabled\", \"=\",0]\n\t\t\t\t\t//[\"Item\",child.workstation,\"=\",doc.workstation]\n\t\t\t\t]\n\t\t\t};\n\t\t};\n\t\tfrm.fields_dict.operation_details.grid.get_field('production_allocation').get_query = function(doc,cdt,cdn) {\n\t\t    var d = locals[cdt][cdn];\n\t\t\treturn {\n\t\t\t\tfilters: [\n\n\t\t\t\t    [\"Production Allocation\",\"workstation\",\"=\",doc.workstation],\n\t\t\t\t    [\"Production Allocation\",\"docstatus\",\"=\",1],\n\t\t\t\t    [\"Production Allocation\",\"nx_is_disabled\",\"=\",0]\n\t\t\t\t    \n\t\t\t\t]\n\t\t\t};\n\t\t};\n\t\tfrm.fields_dict.ideal_details.grid.get_field('delay_reasons').get_query = function(doc,cdt,cdn) {\n\t\t\treturn {\n\t\t\t\tfilters: [\n\t\t\t\t\t[\"Delay Reasons\",\"operation\", \"=\", doc.operation],\n\t\t\t\t\t[\"Delay Reasons\",\"disabled\", \"=\", 0]\n\t\t\t\t]\n\t\t\t};\n\t\t};\n\t\tfrm.fields_dict.operation_details.grid.get_field('operator_name').get_query = function(doc,cdt,cdn) {\n\t\t\treturn {\n\t\t\t\tfilters: [\n\t\t\t\t\t[\"Employee\",\"operation\", \"=\", doc.operation]\n\t\t\t\t]\n\t\t\t};\n\t\t};\n\t\tfrm.fields_dict.assembling_detail.grid.get_field('bom').get_query = function(doc,cdt,cdn) {\n\t\t    var d = locals[cdt][cdn];\n\t\t\treturn {\n\t\t\t\tfilters: [\n\n\t\t\t\t    [\"BOM\",\"item\",\"=\",d.item_code],\n\t\t\t\t    [\"BOM\",\"nx_operation\",\"=\",\"ASSEMBLING\"],\n\t\t\t\t    [\"BOM\",\"docstatus\",\"=\",1]\n\t\t\t\t]\n\t\t\t};\n\t\t};\n\t},\n\ttime_in_mins:function(frm,doc){\n\t    //calculate time in mins\n\t    let time_in_mins = cur_frm.doc.time_in_mins;\n\t    let qty = cur_frm.doc.completed_qty;\n\t    let total_time = (time_in_mins*qty)/60;\n\t    if(cur_frm.doc.time_in_mins){\n\t        frm.set_value(\"total_time_\",total_time);\n\t    }\n\t},\n\tshift_type: function(frm,doc){\n\t    //set value based on shift types\n\t    if(frm.doc.shift_type === \"Shift A\"){\n\t        frm.set_value(\"time_\",7.5);\n\t        frm.set_value(\"posting_date\",frappe.datetime.get_today());\n\t    }\n\t    if(frm.doc.shift_type === \"Shift B\"){\n\t        frm.set_value(\"time_\",15.5);\n\t        frm.set_value(\"posting_date\", frappe.datetime.add_days(frappe.datetime.get_today(), -1));\n\t    }\n\t    if(frm.doc.shift_type === \"Shift C\"){\n\t        frm.set_value(\"time_\",23.5);\n\t        frm.set_value(\"posting_date\", frappe.datetime.add_days(frappe.datetime.get_today(), -1));\n\t    }\n\t}\n});\n//fetch values based on link\ncur_frm.add_fetch(\"shift_type\",\"start_time\",\"start_time\");\ncur_frm.add_fetch(\"shift_type\",\"end_time\",\"end_time\");\ncur_frm.add_fetch(\"shift_type\",\"total_hours\",\"total_hours\");\n\nfrappe.ui.form.on(\"Operator Entry\", \"refresh\", function(frm) {\n    //set route for stock entry list\n    frm.add_custom_button(__(\"View Stock Entries\"), function() {\n     frappe.route_options = {\n\t\"operator_entry\":frm.doc.name\n\t};\n     frappe.set_route(\"List\", \"Stock Entry\",\"List\");\n    }, __(\"Stock Entry\"));\n});\n\n\n\n\n/*frappe.ui.form.on('Operation Details', {\n\ttotal_time_: function(frm, doc,cdt, cdn) {\n\t\tvar child = locals[cdt][cdn];\n\t\tvar end_time =  frappe.datetime.get_hour_diff(child.end_time,child.start_time);\n\t\tvar time = end_time.setHours(total_time_);\n\t\tfrappe.model.set_value(cdt,cdn,\"end_time\",end_time);\n\t\tcalculate_end_time(frm, cdt, cdn);\n\t}\n});\n\nvar calculate_end_time = function(frm, cdt, cdn) {\n\tlet child = locals[cdt][cdn];\n\n\tif(!child.start_time) {\n\t\t// if from_time value is not available then set the current datetime\n\t\tfrappe.model.set_value(cdt, cdn, \"start_time\", frappe.datetime.get_datetime_as_string());\n\t}\n\n\tlet d = moment(child.start_time);\n\tif(child.total_time_) {\n\t\tvar time_diff = (moment(child.end_time).diff(moment(child.start_time),\"seconds\")) / (60 * 60 * 24);\n\t\tvar total_time_ = child.total_time_;\n\n\t\tif (child.total_time_) {\n\t\t\tfrappe.model.set_value(cdt, cdn, \"end_time\", d.add(total_time_, \"total_time_\").format(frappe.defaultDatetimeFormat));\n\t\t}\n\t}\n};*/\n\n\nfrappe.ui.form.on('Assembling Detail', {\n\tsource_warehouse(frm,cdt,cdn) {\n\t\tvar d = locals[cdt][cdn];\n\t\tfrappe.model.set_value(cdt,cdn,\"target_warehouse\",d.source_warehouse);\n\t}\n});"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2021-07-01 12:34:00.488877",
  "name": "Stock Entry-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Stock Entry', {\n    timeline_refresh: function(frm) {\n        //trigger function for button\n        if (frm.doc.docstatus === 1) {\n            if (frm.doc.stock_entry_type === 'Manufacture'){\n                var quality_btn = frm.add_custom_button(__('Quality Inspection'), () => {\n                    frm.trigger(\"create_quality_inspection\");\n                });\n                quality_btn.addClass('btn-primary');\n            }\n        }\n    },\n    create_quality_inspection : function (frm,doc) {\n        //create quality inspection using button\n        frappe.call({\n\t\t\t\tmethod: \"eurocast.eurocast.stock_entry_euro.create_quality_inspection\",\n\t\t\t\targs: {\"docname\": frm.doc.name\n\t\t\t\t},\n\t\t\t\tfreeze: true,\n\t\t\t\tcallback: function(r){\n\t\t\t\t\tif(!r.exc) {\n\t\t\t\t\t\tvar doc = frappe.model.sync(r.message);\n\t\t\t\t\t\tfrappe.set_route(\"Form\", r.message.doctype, r.message.name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n    },\n    quality_inspection: function(frm,doc){\n        //set route to quality inspection\n        frappe.route_options = {\n        \t\"reference_name\":cur_frm.doc.name,\n        \t\"reference_type\": \"Stock Entry\",\n        \t\"inspection_type\": \"In Process\"\n    \t};\n        frappe.set_route(\"Form\", \"Quality Inspection\", \"New Quality Inspection\");\n    },\n    validate: function(frm,doc){\n        //validate naming series based on entry type\n    \tif(frm.doc.stock_entry_type === \"Send to Subcontractor\"){\n    \t    frm.doc.naming_series = \"MAT-JDC-.YYYY.-\";\n    \t}\n    \tif(frm.doc.stock_entry_type === \"Send to Service\"){\n    \t    frm.doc.naming_series = \"MAT-SDC-.YYYY.-\";\n    \t}\n\t},\n\tnx_scan_barcode:function(frm,doc){\n\t    //update paking box items to item table\n\t    frappe.call({\n\t\t\t\tmethod: \"eurocast.eurocast.stock_entry_euro.update_packing_box_items\",\n\t\t\t\targs: {\"docname\": frm.doc.name,\n\t\t\t\t        \"scan_barcode\": cur_frm.doc.nx_scan_barcode\n\t\t\t\t},\n\t\t\t\tfreeze: true,\n\t\t\t\tcallback: function(r){\n\t\t\t\t\tif(r.message) {\n\t\t\t\t\t\tvar child = cur_frm.add_child(\"items\");\n\t\t\t\t\t\tfrappe.model.set_value(child.doctype,child.name,\"item_code\",r.message[0]);\n\t\t\t\t\t\tfrappe.model.set_value(child.doctype,child.name,\"qty\",r.message[1]);\n\t\t\t\t\t\tfrappe.model.set_value(child.doctype,child.name,\"nx_box_no\",r.message[2]);\n\t\t\t\t\t\tfrm.set_value(\"to_warehouse\",\"Safety Stock Store - ECE\");\n\t\t\t\t\t\tfrm.set_value(\"nx_scan_barcode\",null);\n\t\t\t\t\t}\n\t\t\t\t\trefresh_field('items');\n\t\t\t\t}\n\t\t\t});\n\t\t\tcur_frm.save();\n\t}\n\t\n});\n\n\nfrappe.ui.form.on('Stock Entry', {\n    refresh: function(frm,doc) {\n        //set filters based on entry type\n        if((frm.doc.stock_entry_type === \"Send to NC\") || (frm.doc.stock_entry_type === \"Send from NC\")){\n            frm.fields_dict.items.grid.get_field(\"rejection_reason\").get_query = function(doc, cdt, cdn) {\n                return{\n                    filters:{\"reqd\": 1 }\n                };\n                \n            };\n        }\n    }\n});\n\nfrappe.ui.form.on('Stock Entry', {\n\tstock_entry_type: function(frm){\n\t    //set filters based on entry type\n\t    if(frm.doc.stock_entry_type === \"Service Return\"){\n\t        frm.set_df_property(\"gate_inward\",\"reqd\",1);\n\t        frm.set_query(\"gate_inward\", function(doc){\n                return {\n                        \"filters\": {\n                            \"inward_types\": \"Returnables\",\n                            \"status\":\"Open\"\n                    }\n                };\n            });\n\t    }\n\t    else{\n\t        frm.set_df_property(\"gate_inward\",\"reqd\",0);\n\t    }\n\t    if(frm.doc.stock_entry_type === \"Send to Service\"){\n\t        frm.set_df_property(\"nx_sub_purchase_order\",\"reqd\",1);\n            frm.set_query(\"nx_sub_purchase_order\", function(doc){\n                return {\n                        \"filters\": {\n                            \"docstatus\": 1,\n                            \"is_subcontracted\": \"No\",\n                            \"company\": frm.doc.company,\n                            \"purchase_type\": \"Service Order\"\n                    }\n                };\n            });\n        }\n        else{\n            frm.set_df_property(\"nx_sub_purchase_order\",\"reqd\",0);\n        }\n        if(frm.doc.stock_entry_type === \"Customer Provided Item\"){\n\t        frm.set_df_property(\"gate_inward\",\"reqd\",1);\n\t        frm.set_df_property(\"document_no\",\"reqd\",1);\n\t        frm.set_query(\"gate_inward\", function(doc){\n                return {\n                        \"filters\": {\n                            \"inward_types\": \"Customer Provided Item\",\n                            \"status\":\"Open\"\n                    }\n                };\n            });\n        }\n        else{\n            frm.set_df_property(\"gate_inward\",\"reqd\",0);\n            frm.set_df_property(\"document_no\",\"reqd\",0);\n        }\n        if(frm.doc.stock_entry_type === \"Received from Service\"){\n\t        frm.set_df_property(\"gate_inward\",\"reqd\",1);\n\t        frm.set_df_property(\"nx_sub_purchase_order\",\"reqd\",1);\n\t        frm.set_df_property(\"document_no\",\"reqd\",1);\n\t        frm.set_query(\"gate_inward\", function(doc){\n                return {\n                        \"filters\": {\n                            \"inward_types\": \"Job Work Order/Received from Service\",\n                            \"status\":\"Open\"\n                    }\n                };\n            });\n            frm.set_query(\"nx_sub_purchase_order\", function(doc){\n                return {\n                        \"filters\": {\n                            \"purchase_type\": \"Service Order\",\n                            \"docstatus\": 1\n                    }\n                };\n            });\n        }\n        else{\n            frm.set_df_property(\"gate_inward\",\"reqd\",0);\n            frm.set_df_property(\"nx_sub_purchase_order\",\"reqd\",0);\n            frm.set_df_property(\"document_no\",\"reqd\",0);\n        }\n        if(frm.doc.stock_entry_type === \"Supplier Return\"){\n\t        frm.set_df_property(\"gate_inward\",\"reqd\",1);\n\t        frm.set_df_property(\"document_no\",\"reqd\",1);\n\t        frm.set_query(\"gate_inward\", function(doc){\n                return {\n                        \"filters\": {\n                            \"inward_types\": \"Supplier Return\",\n                            \"status\":\"Open\"\n                    }\n                };\n            });\n        }\n        else{\n            frm.set_df_property(\"gate_inward\",\"reqd\",0);\n            frm.set_df_property(\"document_no\",\"reqd\",0);\n        }\n        if(frm.doc.stock_entry_type === \"Repack\"){\n\t        frm.set_query(\"rejection_entry\", function(doc){\n                return {\n                        \"filters\": {\n                            \"docstatus\": 1\n                    }\n                };\n            });\n\t    }\n\t    if(frm.doc.stock_entry_type === \"External Material Receipt\"){\n    \t    frm.set_query(\"gate_inward\", function(doc){\n                    return {\n                            \"filters\": {\n                                \"status\": \"Open\",\n                                \"docstatus\": 1,\n                                \"inward_types\":\"Other Deliveries\"\n                        }\n                    };\n                });\n\t    }\n\t},\n\tvalidate: function(frm,doc){\n\t    //set value for posting time and purchase order fields\n\t    frm.set_value(\"shift_time\",frm.doc.posting_time);\n\t    if(frm.doc.purchase_order){\n        \tfrm.set_value(\"nx_purchase_order\",frm.doc.purchase_order);\n        \tcur_frm.refresh_field(\"nx_purchase_order\");\n    \t}\n    \tif(frm.doc.nx_sub_purchase_order){\n        \tfrm.set_value(\"nx_sub_purchase_order_no\",frm.doc.nx_sub_purchase_order);\n        \tcur_frm.refresh_field(\"nx_sub_purchase_order_no\");\n    \t}\n\t},\n\tonload_post_render: function(frm,doc){\n\t    //set stock entry name\n\t    frm.set_value(\"stock_entry_no\",frm.doc.name);\n\t},\n\tnx_supplier:function(frm,doc){\n\t    //fetch to warehouse and from warehouse from supplier\n\t    frappe.call({\n\t\t\t\tmethod: \"eurocast.eurocast.stock_entry_euro.get_supplier_warehouse\",\n\t\t\t\targs: {\"docname\": frm.doc.name,\n\t\t\t\t        \"supplier\": cur_frm.doc.nx_supplier,\n\t\t\t\t        \"stock_entry_type\": cur_frm.doc.stock_entry_type\n\t\t\t\t},\n\t\t\t\tfreeze: true,\n\t\t\t\tcallback: function(r){\n\t\t\t\t\tif(r.message) {\n\t\t\t\t\t    if(frm.doc.stock_entry_type === \"External Material Issue\"){\n\t\t\t\t\t        frm.set_value(\"to_warehouse\",r.message);\n\t\t\t\t\t    }\n\t\t\t\t\t    if(frm.doc.stock_entry_type === \"External Material Receipt\"){\n\t\t\t\t\t        frm.set_value(\"from_warehouse\",r.message);\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tif(frm.doc.stock_entry_type === \"External Material Receipt\"){\n        \t    frm.set_query(\"gate_inward\", function(doc){\n                        return {\n                                \"filters\": {\n                                    \"status\": \"Open\",\n                                    \"docstatus\": 1,\n                                    \"inward_types\":\"Other Deliveries\",\n                                    \"supplier_name\":frm.doc.nx_supplier\n                            }\n                        };\n                    });\n\t        }\n\t},\n\tnx_customer_name:function(frm,doc){\n\t    //fetch to warehouse and from warehouse from customer\n\t    frappe.call({\n\t\t\t\tmethod: \"eurocast.eurocast.stock_entry_euro.get_customer_warehouse\",\n\t\t\t\targs: {\"docname\": frm.doc.name,\n\t\t\t\t        \"customer\": cur_frm.doc.nx_customer_name,\n\t\t\t\t        \"stock_entry_type\": cur_frm.doc.stock_entry_type\n\t\t\t\t},\n\t\t\t\tfreeze: true,\n\t\t\t\tcallback: function(r){\n\t\t\t\t\tif(r.message) {\n\t\t\t\t\t    if(frm.doc.stock_entry_type === \"External Material Receipt\"){\n\t\t\t\t\t        frm.set_value(\"from_warehouse\",r.message);\n\t\t\t\t\t    }\n\t\t\t\t\t    if(frm.doc.stock_entry_type === \"External Material Issue\"){\n\t\t\t\t\t        frm.set_value(\"to_warehouse\",r.message);\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tif(frm.doc.stock_entry_type === \"External Material Receipt\"){\n        \t    frm.set_query(\"gate_inward\", function(doc){\n                        return {\n                                \"filters\": {\n                                    \"status\": \"Open\",\n                                    \"docstatus\": 1,\n                                    \"inward_types\":\"Other Deliveries\",\n                                    \"customer_name\":frm.doc.nx_customer_name\n                            }\n                        };\n                    });\n\t        }\n\t}\n});\n\nfrappe.ui.form.on(\"Stock Entry\",{ \n    onload: function(frm) { \n        //hide add multiple button in child table\n        if (frm.doc.stock_entry_type == \"Full Rejection\") {\n        cur_frm.fields_dict.items.grid.wrapper.find(\".grid-add-multiple-rows\").hide(); \n        }\n    },\n    stock_entry_type: function(frm){\n        //set filter for rejection entry field\n\t    if(frm.doc.stock_entry_type === \"Full Rejection\"){\n\t        frm.set_df_property(\"rejection_entry\",\"reqd\",1);\n\t        frm.set_query(\"rejection_entry\", function(doc){\n                return {\n                        \"filters\": [\n                            [\"Rejection Entry\",\"docstatus\",\"=\",1],\n                            [\"Rejection Entry\",\"status\",\"!=\",\"Completed\"]\n                    ]\n                };\n            });\n\t    }\n\t    else{\n\t        //set property for rejection entry\n\t        frm.set_df_property(\"rejection_entry\",\"reqd\",0);\n\t    }\n\t    if(frm.doc.stock_entry_type === \"Send to Service\"){\n\t        //frm.set_df_property(\"nx_gate_outward\",\"reqd\",1);\n\t        //set filters for gate outward field\n\t        frm.set_query(\"nx_gate_outward\", function(doc){\n                return {\n                        \"filters\": [\n                            [\"Gate Outward\",\"docstatus\",\"=\",1],\n                    ]\n                };\n            });\n\t    }\n\t},\n\tupdate_rejection: function(frm,doc){\n\t    //update items using frappe.call to child table\n\t    const set_fields = ['item_code','qty','uom','stock_uom','conversion_factor','transfer_qty','item_value','item_weight',\"source_or_raw_material_\",\"s_warehouse\"];\n\t    frappe.call({\n\t\t\t\tmethod: \"eurocast.eurocast.doctype.rejection_entry.rejection_entry.update_items\",\n\t\t\t\targs: {\"docname\": frm.doc.name,\n\t\t\t\t        \"rejection_entry\": cur_frm.doc.rejection_entry,\n\t\t\t\t        \"nx_source_warehouse\": cur_frm.doc.nx_source_warehouse\n\t\t\t\t},\n\t\t\t\tfreeze: true,\n\t\t\t\tcallback: function(r){\n\t\t\t\t\tif(r.message) {\n\t\t\t\t\t    frm.set_value('items', []);\n\t\t\t\t\t\tvar child = cur_frm.add_child(\"items\");\n\t\t\t\t\t\tcur_frm.clear_table(\"items\");\n            \t\t\t$.each(r.message, function(i, d) {\n    \t\t\t\t\t\tvar item = frm.add_child('items');\n    \t\t\t\t\t\tfor (let key in d) {\n    \t\t\t\t\t\t\tif (d[key] && in_list(set_fields, key)) {\n    \t\t\t\t\t\t\t\titem[key] = d[key];\n    \t\t\t\t\t\t\t}\n\t\t\t\t\t\t    }\n\t\t\t\t\t    });\n\t\t\t\t\t}\n\t\t\t\t\trefresh_field('items');\n\t\t\t\t}\n\t\t\t});\n\t},\n\tupdate_repack: function(frm,doc){\n\t    //update items using frappe.call to child table\n\t    const set_fields = ['item_code','uom','stock_uom','conversion_factor','default_bom','transfer_qty','qty'];\n\t    frappe.call({\n\t\t\t\tmethod: \"eurocast.eurocast.stock_entry_euro.update_items\",\n\t\t\t\targs: {\"docname\": frm.doc.name,\n\t\t\t\t        \"source_item\": cur_frm.doc.source_item,\n\t\t\t\t         \"qty\": cur_frm.doc.repack_qty\n\t\t\t\t},\n\t\t\t\tfreeze: true,\n\t\t\t\tcallback: function(r){\n\t\t\t\t\tif(r.message) {\n\t\t\t\t\t    frm.set_value('items', []);\n\t\t\t\t\t\tvar child = cur_frm.add_child(\"items\");\n\t\t\t\t\t\tcur_frm.clear_table(\"items\");\n            \t\t\t$.each(r.message, function(i, d) {\n    \t\t\t\t\t\tvar item = frm.add_child('items');\n    \t\t\t\t\t\tfor (let key in d) {\n    \t\t\t\t\t\t\tif (d[key] && in_list(set_fields, key)) {\n    \t\t\t\t\t\t\t\titem[key] = d[key];\n    \t\t\t\t\t\t\t}\n\t\t\t\t\t\t    }\n\t\t\t\t\t    });\n\t\t\t\t\t}\n\t\t\t\t\trefresh_field('items');\n\t\t\t\t}\n\t\t\t});\n\t},\n\tupdate_raw_material: function(frm,doc){\n\t    //update items using frappe.call to child table\n\t    const set_fields = ['item_code','uom','stock_uom','conversion_factor','default_bom','transfer_qty','qty',\"source_or_raw_material_\",\"t_warehouse\",\"source_item\"];\n\t    frappe.call({\n\t\t\t\tmethod: \"eurocast.eurocast.stock_entry_euro.update_items_bom\",\n\t\t\t\targs: {\"docname\": frm.doc.name,\n\t\t\t\t        \"rejection_entry\": cur_frm.doc.rejection_entry,\n\t\t\t\t        \"nx_target_warehouse\": cur_frm.doc.nx_target_warehouse\n\t\t\t\t        //\"qty\": cur_frm.doc.repack_qty\n\t\t\t\t},\n\t\t\t\tfreeze: true,\n\t\t\t\tcallback: function(r){\n\t\t\t\t\tif(r.message) {\n\t\t\t\t\t    //frm.set_value('items', []);\n\t\t\t\t\t\t//var child = cur_frm.add_child(\"items\");\n\t\t\t\t\t\t//cur_frm.clear_table(\"items\");\n            \t\t\t$.each(r.message, function(i, d) {\n    \t\t\t\t\t\tvar item = frm.add_child('items');\n    \t\t\t\t\t\tfor (let key in d) {\n    \t\t\t\t\t\t\tif (d[key] && in_list(set_fields, key)) {\n    \t\t\t\t\t\t\t\titem[key] = d[key];\n    \t\t\t\t\t\t\t}\n\t\t\t\t\t\t    }\n\t\t\t\t\t    });\n\t\t\t\t\t}\n\t\t\t\t\trefresh_field('items');\n\t\t\t\t}\n\t\t\t});\n\t},\n\tnx_sub_purchase_order: function(frm,doc){\n\t    //update items using frappe.call to child table\n\t    if(frm.doc.stock_entry_type === \"Send to Service\"){\n\t        frappe.call({\n\t\t\t\tmethod: \"eurocast.eurocast.stock_entry_euro.update_warehouse\",\n\t\t\t\targs: {\"docname\": frm.doc.name,\n\t\t\t            \"purchase_order\":frm.doc.nx_sub_purchase_order\n\t\t\t\t},\n\t\t\t\tfreeze: true,\n\t\t\t\tcallback: function(r){\n\t\t\t\t\tif(r.message) {\n\t\t\t           cur_frm.set_value(\"from_warehouse\", r.message[0]);\n\t\t\t           cur_frm.set_value(\"to_warehouse\", r.message[1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t    }\n\t    if(frm.doc.stock_entry_type === \"Received from Service\"){\n\t        //update items using frappe.call to child table\n\t        frappe.call({\n\t\t\t\tmethod: \"eurocast.eurocast.stock_entry_euro.update_warehouse_received\",\n\t\t\t\targs: {\"docname\": frm.doc.name,\n\t\t\t            \"purchase_order\":frm.doc.nx_sub_purchase_order\n\t\t\t\t},\n\t\t\t\tfreeze: true,\n\t\t\t\tcallback: function(r){\n\t\t\t\t\tif(r.message) {\n\t\t\t           frm.set_value(\"from_warehouse\", r.message);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t    }\n\t}\n\t/*nx_sub_purchase_order: function(frm,doc){\n\t    if((frm.doc.stock_entry_type === \"Send to Service\")&&(frm.doc.nx_sub_purchase_order)){\n\t    const set_fields = ['item_code','qty','uom','stock_uom','conversion_factor','transfer_qty','basic_rate','item_group','item_name'];\n\t\t    frappe.call({\n\t\t\t\t\"method\": \"eurocast.eurocast.doctype.gate_outward.gate_outward.update_items_service\",\n\t\t\t\targs: {\"purchase_order\": cur_frm.doc.nx_sub_purchase_order\n\t\t\t\t},\n\t\t\t\tfreeze: true,\n\t\t\t\tcallback: function(r){\n\t\t\t\t\tif(r.message) {\n\t\t\t\t\t\tfrm.set_value('items', []);\n\t\t\t\t\t\tvar child = cur_frm.add_child(\"items\");\n\t\t\t\t\t\tcur_frm.clear_table(\"items\");\n            \t\t\t$.each(r.message, function(i, d) {\n    \t\t\t\t\t\tvar item = frm.add_child('items');\n    \t\t\t\t\t\tfor (let key in d) {\n    \t\t\t\t\t\t\tif (d[key] && in_list(set_fields, key)) {\n    \t\t\t\t\t\t\t\titem[key] = d[key];\n    \t\t\t\t\t\t\t}\n\t\t\t\t\t\t    }\n\t\t\t\t\t    });\n\t\t\t\t\t}\n\t\t\t\t\trefresh_field('items');\n\t\t\t\t}\n\t\t\t});\n\t    }\n\t}*/\n});\n\nfrappe.ui.form.on('Stock Entry Detail', {\n    //set route for quality inspection\n\tnx_quality_inspection:function(frm,cdt,cdn) {\n\t    let d = locals[cdt][cdn];\n\t    if (frm.doc.reference_purchase_receipt !== null){\n    \t\tfrappe.route_options = {\n            \t\"item_code\": d.item_code,\n    \t\t\t\"item_name\": d.item_name,\n    \t\t\t\"description\": d.description,\n    \t\t\t\"reference_name\": d.reference_purchase_receipt,\n    \t\t\t\"reference_type\": \"Purchase Receipt\",\n    \t\t\t\"stock_entry_ref_no\": frm.doc.name,\n    \t\t\t\"inspection_type\": \"Material Transfer\"\n            };\n            frappe.set_route(\"Form\", \"Quality Inspection\", \"New Quality Inspection\");\n\t        \n\t    }   \n\t}\n});\n\nfrappe.ui.form.on('Stock Entry', {\n    refresh: function(frm,doc) {\n        //set letter head based on entry type\n        if(frm.doc.stock_entry_type === \"Send to Service\"){\n            frm.doc.letter_head = \"LH - SS\";\n        }\n        else{\n            frm.doc.letter_head = \"LH - SE\";\n        }\n        \n        //ECE: Filteration for stores based on users for Stock Entry Type\n\t\tswitch(frm.doc.owner) {\n\t\t\tcase 'incomingsup3@eurocast.in':\n\t\t\tcase 'incomingsup2@eurocast.in':\n\t\t\tcase 'incomingsup1@eurocast.in':\n\t\t\tcase 'ecefinalsup@gmail.com':\n\t\t\t\t// Filter for Stock Entry Type Warehouse\n\t\t\t\tfrm.fields_dict['stock_entry_type'].get_query = function(doc) {\n\t\t\t\t\t\t\treturn{\"filters\": [[\"Stock Entry Type\",\"name\", \"IN\", ['Material Transfer', \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Full Rejection']]]};\n\t\t\t\t};\n\t\t\t\tif(['Material Transfer', 'Full Rejection'].indexOf(frm.doc.stock_entry_type) == -1){\n                    if(frm.doc.stock_entry_type)\n\t\t\t\t\t\tfrappe.msgprint('Your do not have sufficient rights to create Stock Entry Type: '+frm.doc.stock_entry_type);\n\t\t\t\t    frm.set_value('stock_entry_type','Material Transfer');\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'eceincoming@gmail.com':\n\t\t\tcase 'ecepdcquality@gmail.com':\n\t\t\tcase 'ecevmcquality@gmail.com':\n\t\t\t\t// Filter for Stock Entry Type Warehouse\n\t\t\t\tfrm.fields_dict['stock_entry_type'].get_query = function(doc) {\n\t\t\t\t\t\t\treturn{\"filters\": [[\"Stock Entry Type\",\"name\", \"IN\", ['Material Transfer', \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Full Rejection',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Material Issue']]]};\n\t\t\t\t};\n\t\t\t\tif(['Material Transfer', 'Full Rejection','Material Issue'].indexOf(frm.doc.stock_entry_type) == -1){\n                    if(frm.doc.stock_entry_type)\n\t\t\t\t\t\tfrappe.msgprint('Your do not have sufficient rights to create Stock Entry Type: '+frm.doc.stock_entry_type);\n\t\t\t\t    frm.set_value('stock_entry_type','Material Transfer');\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'ececalibration1@gmail.com':\n\t\t\tcase 'eceproduction@gmail.com':\n\t\t\tcase 'ecepdcsup@gmail.com':\n\t\t\tcase 'ececncproduction@gmail.com':\n\t\t\tcase 'ecevmcsup@gmail.com':\n\t\t\t\t// Filter for Stock Entry Type Warehouse\n\t\t\t\tfrm.fields_dict['stock_entry_type'].get_query = function(doc) {\n\t\t\t\t\t\t\treturn{\"filters\": [[\"Stock Entry Type\",\"name\", \"IN\", ['Material Transfer']]]};\n\t\t\t\t};\n\t\t\t\tif(['Material Transfer'].indexOf(frm.doc.stock_entry_type) == -1){\n                    if(frm.doc.stock_entry_type)\n\t\t\t\t\t\tfrappe.msgprint('Your do not have sufficient rights to create Stock Entry Type: '+frm.doc.stock_entry_type);\n\t\t\t\t    frm.set_value('stock_entry_type','Material Transfer');\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'eurocastdiecasting@gmail.com':\n\t\t\tcase 'eceheadmachining@gmail.com':\n\t\t\t\t\t\t\t// Filter for Stock Entry Type Warehouse\n\t\t\t\tfrm.fields_dict['stock_entry_type'].get_query = function(doc) {\n\t\t\t\t\t\t\treturn{\"filters\": [[\"Stock Entry Type\",\"name\", \"IN\", ['Material Transfer',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Material Issue']]]};\n\t\t\t\t};\n\t\t\t\tif(['Material Transfer', 'Material Issue'].indexOf(frm.doc.stock_entry_type) == -1){\n                    if(frm.doc.stock_entry_type)\n\t\t\t\t\t\tfrappe.msgprint('Your do not have sufficient rights to create Stock Entry Type: '+frm.doc.stock_entry_type);\n\t\t\t\t    frm.set_value('stock_entry_type','Material Transfer');\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'assistantfgstore3@eurocast.in':\n\t\t\tcase 'assistantfgstore2@eurocast.in':\n\t\t\tcase 'assistantfgstore1@eurocast.in':\n\t\t\t\t// Filter for Stock Entry Type Warehouse\n\t\t\t\tfrm.fields_dict['stock_entry_type'].get_query = function(doc) {\n\t\t\t\t\t\t\treturn{\"filters\": [[\"Stock Entry Type\",\"name\", \"IN\", ['Material Transfer', \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Send to Subcontractor',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'External Material Receipt',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'External Material Issue',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Supplier Return',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Transfer to Safety Stock']]]};\n\t\t\t\t};\n\t\t\t\tif(['Material Transfer','Supplier Return','Send to Subcontractor','External Material Receipt','External Material Issue','Transfer to Safety Stock'].indexOf(frm.doc.stock_entry_type) == -1){\n                    if(frm.doc.stock_entry_type)\n\t\t\t\t\t\tfrappe.msgprint('Your do not have sufficient rights to create Stock Entry Type: '+frm.doc.stock_entry_type);\n\t\t\t\t    frm.set_value('stock_entry_type','Material Transfer');\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'ecediemaintenance@gmail.com':\n\t\t\t\t// Filter for Stock Entry Type Warehouse\n\t\t\t\tfrm.fields_dict['stock_entry_type'].get_query = function(doc) {\n\t\t\t\t\t\t\treturn{\"filters\": [[\"Stock Entry Type\",\"name\", \"IN\", ['Material Transfer', \n\t\t\t\t\t\t\t                                                      'External Material Receipt',\n\t\t\t\t\t\t\t                                                      'External Material Issue',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   'Supplier Return',]]]};\n\t\t\t\t};\n\t\t\t\tif(['Material Transfer','Supplier Return','External Material Receipt','External Material Issue'].indexOf(frm.doc.stock_entry_type) == -1){\n                    if(frm.doc.stock_entry_type)\n\t\t\t\t\t\tfrappe.msgprint('Your do not have sufficient rights to create Stock Entry Type: '+frm.doc.stock_entry_type);\n\t\t\t\t    frm.set_value('stock_entry_type','Material Transfer');\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'ecetally@gmail.com':\n\t\t\t\t// Filter for Stock Entry Type Warehouse\n\t\t\t\tfrm.fields_dict['stock_entry_type'].get_query = function(doc) {\n\t\t\t\t\t\t\treturn{\"filters\": [[\"Stock Entry Type\",\"name\", \"IN\", ['Repack']]]};\n\t\t\t\t};\n\t\t\t\tif(['Repack'].indexOf(frm.doc.stock_entry_type) == -1){\n                    if(frm.doc.stock_entry_type)\n\t\t\t\t\t\tfrappe.msgprint('Your do not have sufficient rights to create Stock Entry Type: '+frm.doc.stock_entry_type);\n\t\t\t\t    frm.set_value('stock_entry_type','Repack');\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t// code block\n\t\t\t\t//frappe.msgprint(\"default\");\n\t\t\t\tbreak;\n\t\t}\n\n\t\t//ECE: Filteration for stores based on users for Source and Target Warehouse\n\t\tswitch(frm.doc.owner) {\n\t\t\tcase 'eurocastdiecasting@gmail.com':\n\t\t\tcase 'eceproduction@gmail.com':\n\t\t\tcase 'ecepdcsup@gmail.com':\n\t\t\t\t// Filter for Source Warehouse\n\t\t\t\tfrm.fields_dict['from_warehouse'].get_query = function(doc) {\n\t\t\t\t\t\t\treturn{\"filters\": [[\"Warehouse\",\"warehouse_name\", \"=\", 'PDC Store']]};\n\t\t\t\t};\n\t\t\t\t// Filter for Target Warehouse\n\t\t\t\tfrm.fields_dict['to_warehouse'].get_query = function(doc) {\n\t\t\t\t\t\t\treturn{\"filters\": [[\"Warehouse\",\"warehouse_name\", \"IN\", ['Machining Store', \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Plant Maintenance', \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Die Maintenance Store', \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Final Store', \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Dispatch Store', \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Main Store']]]};\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase 'ececncproduction@gmail.com':\n\t\t\tcase 'ecevmcsup@gmail.com':\n\t\t\tcase 'eceheadmachining@gmail.com':\n\t\t\t\t// Filter for Source Warehouse\n\t\t\t\tfrm.fields_dict['from_warehouse'].get_query = function(doc) {\n\t\t\t\t\t\t\treturn{\"filters\": [[\"Warehouse\",\"warehouse_name\", \"=\", 'Machining Store']]};\n\t\t\t\t};\n\t\t\t\t// Filter for Target Warehouse\n\t\t\t\tfrm.fields_dict['to_warehouse'].get_query = function(doc) {\n\t\t\t\t\t\t\treturn{\"filters\": [[\"Warehouse\",\"warehouse_name\", \"IN\", ['Safety Stock Store', \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'PDC Store', \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Despatch Store', \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Main Store']]]};\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase 'eceincoming@gmail.com':\n\t\t\tcase 'incomingsup3@eurocast.in':\n\t\t\tcase 'incomingsup2@eurocast.in':\n\t\t\tcase 'incomingsup1@eurocast.in':\n\t\t\t\t// Filter for Source Warehouse\n\t\t\t\tfrm.fields_dict['from_warehouse'].get_query = function(doc) {\n\t\t\t\t\t\t\treturn{\"filters\": [[\"Warehouse\",\"warehouse_name\", \"=\", 'Incoming Store']]};\n\t\t\t\t};\n\t\t\t\t// Filter for Target Warehouse\n\t\t\t\tfrm.fields_dict['to_warehouse'].get_query = function(doc) {\n\t\t\t\t\t\t\treturn{\"filters\": [[\"Warehouse\",\"warehouse_name\", \"IN\", ['Safety Stock Store',\n\t\t\t\t\t\t\t                                                        'Lab Store',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'NC Store',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Machining Store',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Final Store', \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'PDC Store',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Scrap Store',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Despatch Store', \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Main Store']]]};\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase 'ecepdcquality@gmail.com':\n\t\t\t\t// Filter for Source Warehouse\n\t\t\t\tfrm.fields_dict['from_warehouse'].get_query = function(doc) {\n\t\t\t\t\t\t\treturn{\"filters\": [[\"Warehouse\",\"warehouse_name\", \"=\", 'PDC Store']]};\n\t\t\t\t};\n\t\t\t\t// Filter for Target Warehouse\n\t\t\t\tfrm.fields_dict['to_warehouse'].get_query = function(doc) {\n\t\t\t\t\t\t\treturn{\"filters\": [[\"Warehouse\",\"warehouse_name\", \"IN\", ['NC Store',\n\t\t\t\t\t\t\t                                                         'Scrap Store',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Lab Store']]]};\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase 'ecevmcquality@gmail.com':\n\t\t\t\t// Filter for Source Warehouse\n\t\t\t\tfrm.fields_dict['from_warehouse'].get_query = function(doc) {\n\t\t\t\t\t\t\treturn{\"filters\": [[\"Warehouse\",\"warehouse_name\", \"=\", 'Machining Store']]};\n\t\t\t\t};\n\t\t\t\t// Filter for Target Warehouse\n\t\t\t\tfrm.fields_dict['to_warehouse'].get_query = function(doc) {\n\t\t\t\t\t\t\treturn{\"filters\": [[\"Warehouse\",\"warehouse_name\", \"IN\", ['NC Store',\n\t\t\t\t\t\t\t                                                        'Scrap Store',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Lab Store']]]};\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase 'ecefinalsup@gmail.com':\n\t\t\t\t// Filter for Source Warehouse\n\t\t\t\tfrm.fields_dict['from_warehouse'].get_query = function(doc) {\n\t\t\t\t\t\t\treturn{\"filters\": [[\"Warehouse\",\"warehouse_name\", \"=\", 'Final Store']]};\n\t\t\t\t};\n\t\t\t\t// Filter for Target Warehouse\n\t\t\t\tfrm.fields_dict['to_warehouse'].get_query = function(doc) {\n\t\t\t\t\t\t\treturn{\"filters\": [[\"Warehouse\",\"warehouse_name\", \"IN\", ['NC Store',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Despatch Store',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Scrap Store',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Safety Stock Store',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Main Store',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Lab Store']]]};\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase 'calibrationlabincharge':\n\t\t\t\t// Filter for Source Warehouse\n\t\t\t\tfrm.fields_dict['from_warehouse'].get_query = function(doc) {\n\t\t\t\t\t\t\treturn{\"filters\": [[\"Warehouse\",\"warehouse_name\", \"=\", 'Lab Store']]};\n\t\t\t\t};\n\t\t\t\t// Filter for Target Warehouse\n\t\t\t\tfrm.fields_dict['to_warehouse'].get_query = function(doc) {\n\t\t\t\t\t\t\treturn{\"filters\": [[\"Warehouse\",\"warehouse_name\", \"IN\", ['Incoming Store',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'PDC Store',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Final Store', \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Main Store',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Machining Store']]]};\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\t//case 'ecediemaintenance@gmail.com':\n\t\t\t\t// Filter for Source Warehouse\n\t\t\t\tfrm.fields_dict['from_warehouse'].get_query = function(doc) {\n\t\t\t\t\t\t\treturn{\"filters\": [[\"Warehouse\",\"warehouse_name\", \"=\", 'Die Maintenance Store']]};\n\t\t\t\t};\n\t\t\t\t// Filter for Target Warehouse\n\t\t\t\tfrm.fields_dict['to_warehouse'].get_query = function(doc) {\n\t\t\t\t\t\t\treturn{\"filters\": [[\"Warehouse\",\"warehouse_name\", \"IN\", ['PDC Store',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Plant Maintenance', \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Main Store']]]};\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase 'balakumar@eurocast.in':\n\t\t\t//case 'assistantfgstore2@eurocast.in':\n\t\t\t//case 'assistantfgstore1@eurocast.in':\n\t\t\t\t// Filter for Source Warehouse\n\t\t\t\t/*frm.fields_dict['from_warehouse'].get_query = function(doc) {\n\t\t\t\t\t    \t\treturn 'SELECT name FROM `tabWarehouse` WHERE (warehouse_name = \"Main Store\" OR parent_warehouse = \"Fettling Supplier Warehouse - ECE\")';\n\t\t\t\t};*/\n\t\t\t\t/*frm.fields_dict['from_warehouse'].get_query = function(doc) {\n\t\t\t\t\t\t\treturn{\"filters\": [[\"Warehouse\",\"warehouse_name\", \"=\", 'Main Store'],\n\t\t\t\t\t\t\t                    [\"Warehouse\",\"parent_warehouse\", \"=\", 'Internal Warehouses - ECE']\n\t\t\t\t\t\t\t]};\n\t\t\t\t};*/\n\t\t\t\t// Filter for Target Warehouse\n\t\t\t\t/*frm.fields_dict['to_warehouse'].get_query = function(doc) {\n\t\t\t\t\t\t\treturn{\"filters\": [[\"Warehouse\",\"warehouse_name\", \"IN\", ['Die Maintenance Store']],\n\t\t\t\t\t\t\t                    [\"Warehouse\",\"warehouse_name\", \"IN\", ['Main Store']]\n\t\t\t\t\t\t\t]};\n\t\t\t\t};*/\n                break;\n\t\t\tcase 'ecetally@gmail.com':\n\t\t\t\t// Filter for Source Warehouse\n\t\t\t\tfrm.fields_dict['nx_source_warehouse'].get_query = function(doc) {\n\t\t\t\t\t\t\treturn{\"filters\": [[\"Warehouse\",\"warehouse_name\", \"=\", 'Scrap Store']]};\n\t\t\t\t};\n\t\t\t\t// Filter for Target Warehouse\n\t\t\t\tfrm.fields_dict['nx_target_warehouse'].get_query = function(doc) {\n\t\t\t\t\t\t\treturn{\"filters\": [[\"Warehouse\",\"warehouse_name\", \"IN\", ['Main Store']]]};\n\t\t\t\t};\n                //Set the default value\n\t\t\t\tfrm.set_value('nx_source_warehouse', 'Scrap Store - ECE');\n\t\t\t\tfrm.set_value('nx_target_warehouse', 'Main Store - ECE');\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t// code block\n\t\t\t\t//No filtering\n\t\t\t\tbreak;\n\t\t}\n    }\n});\n/*\nfrappe.ui.form.on('Stock Entry', {\n\trefresh: function(frm,doc){\n\t    frm.set_query(\"nx_supplier_address\", function(doc){\n        return {\n                \"filters\": {\n                    \"address_title\": doc.nx_supplier\n                }\n            };\n        });\n\t}\n});\n\nfrappe.ui.form.on(\"Stock Entry\", \"nx_supplier_address\", function(frm, cdt, cdn) {\n    if(frm.doc.nx_supplier_address){\n    \treturn frm.call({\n    \t\tmethod: \"frappe.contacts.doctype.address.address.get_address_display\",\n    \t\targs: {\n    \t\t\t\"address_dict\": frm.doc.nx_supplier_address\n    \t\t},\n    \t\tcallback: function(r) {\n    \t\t\tif(r.message)\n    \t\t\t\tfrm.set_value(\"nx_address_display\", r.message);\n    \t\t}\n    \t});\n    }\n    else{\n        frm.set_value(\"nx_address_display\", \"\");\n    }\n});\n*/\n\n\n/*frappe.ui.form.on('Stock Entry', {\n    validate: function(frm,doc) {\n    \tif(frm.doc.posting_time > \"15:30:00\" && frm.doc.posting_time < \"23:30:00\"){\n    \t    frm.set_value(\"shift_hrs\",2);\n    \t    frm.set_value(\"shift_date\",frm.doc.posting_date);\n    \t}\n    \telse if((frm.doc.posting_time > \"00:00:00\" && frm.doc.posting_time < \"7:30:00\")|| (frm.doc.posting_time > \"23:30:00\" && frm.doc.posting_time < \"00:00:00\")){\n    \t    frm.set_value(\"shift_date\",frappe.datetime.add_days(frm.doc.posting_date, -1));\n    \t}\n    \telse{\n    \t    frm.set_value(\"shift_date\",frm.doc.posting_date);\n    \t}\n\t}\n});*/\n\n\n\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2021-06-30 13:13:47.420739",
  "name": "Purchase Receipt-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "//fetch value based on link field\ncur_frm.add_fetch(\"item_code\",\"inspection_required_before_purchase\",\"is_inspection\");\n\nfrappe.ui.form.on('Purchase Receipt Item', {\n    //creating quality inspection from button\n\tcreate_inspection_entry: function(frm,cdt,cdn) {\n\t    let d = locals[cdt][cdn];\n\t    frappe.call({\n\t\t\t\tmethod: \"eurocast.eurocast.purchase_receipt_euro.create_quality_inspection\",\n\t\t\t\targs: {\"docname\": frm.doc.name,\n\t\t\t\t},\n\t\t\t\tfreeze: true,\n\t\t\t\tcallback: function(r){\n\t\t\t\t\tif(!r.exc) {\n\t\t\t\t\t\tvar doc = frappe.model.sync(r.message);\n\t\t\t\t\t\tfrappe.set_route(\"Form\", r.message.doctype, r.message.name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t}\n});\n\nfrappe.ui.form.on('Purchase Receipt', {\n    //set filter for gate_inward field in parent\n\tsupplier: function(frm){\n    \tfrm.set_query(\"gate_inward\", function(doc){\n            return {\n                    \"filters\": [\n                            [\"Gate Inward\",\"inward_types\",\"in\",\"Purchase Order,Job Work Order/Received from Service\"],\n                            [\"Gate Inward\",\"status\",\"=\",\"Open\"]\n                            //[\"Gate Inward\",\"supplier_name\",\"=\",frm.doc.supplier]\n                    ]\n                };\n        });\n\t},\n\tonload: function(frm){\n\t    //set filter for gate_inward field in parent\n    \tfrm.set_query(\"gate_inward\", function(doc){\n            return {\n                    \"filters\": [\n                            [\"Gate Inward\",\"inward_types\",\"in\",\"Purchase Order,Job Work Order/Received from Service\"],\n                            [\"Gate Inward\",\"status\",\"=\",\"Open\"]\n                            //[\"Gate Inward\",\"supplier_name\",\"=\",frm.doc.supplier]\n                    ]\n                };\n        });\n\t},\n\trefresh: function(frm){\n\t    //set filter for gate_inward field in parent\n    \tfrm.set_query(\"gate_inward\", function(doc){\n            return {\n                    \"filters\": [\n                            [\"Gate Inward\",\"inward_types\",\"in\",\"Purchase Order,Job Work Order\"],\n                            [\"Gate Inward\",\"status\",\"=\",\"Open\"]\n                            //[\"Gate Inward\",\"supplier_name\",\"=\",frm.doc.supplier]\n                    ]\n                };\n        });\n\t},\n\tvalidate: function(frm,doc){\n\t    //validating naming series\n    \tif(frm.doc.is_return === 1){\n    \t    frm.doc.naming_series = \"MAT-PDC-.YYYY.-\";\n    \t}\n\t}\n});\n\n\n\nfrappe.ui.form.on('Purchase Receipt', {\n    //validating letter head\n    validate: function(frm,doc) {\n            frm.doc.letter_head = \"LH - PR\";\n    },\n    nx_update:function(frm,doc){\n        //update values to child table using frappe.call\n\t    const set_fields = [\"item_code\",'item_name','description','qty','uom','stock_uom','received_qty','conversion_factor','purchase_order','rate','amount','warehouse','cost_center','bom','schedule_date','nx_item_code'];\n\t\t\tfrappe.call({\n\t\t\t\tmethod: \"eurocast.eurocast.purchase_receipt_euro.update_items\",\n\t\t\t\targs: {\"docname\": frm.doc.name,\n\t\t\t\t        \"supplier\": frm.doc.supplier,\n\t\t\t\t\t\t\"document_no\":frm.doc.document_no,\n\t\t\t\t\t\t\"document_date\": frm.doc.document_date,\n\t\t\t\t        \"gate_inward\": cur_frm.doc.gate_inward\n\t\t\t\t},\n\t\t\t\tfreeze: true,\n\t\t\t\tcallback: function(r){\n\t\t\t\t\tif(r.message) {\n\t\t\t\t\t\t//frappe.model.set_value('items',[]);\n\t\t\t\t\t\t//var child = cur_frm.add_child(\"items\",{});\n\t\t\t\t\t    //cur_frm.clear_table(\"items\");\n            \t\t\t$.each(r.message, function(i, d) {\n    \t\t\t\t\t\tvar item = frm.add_child('items');\n    \t\t\t\t\t\tfor (let key in d) {\n    \t\t\t\t\t\t\tif (d[key] && in_list(set_fields, key)) {\n    \t\t\t\t\t\t\t\titem[key] = d[key];\n    \t\t\t\t\t\t\t}\n\t\t\t\t\t\t    }\n\t\t\t\t\t    });\n\t\t\t\t\t}\n\t\t\t\t\tcur_frm.refresh_field(\"items\");\n\t\t\t\t}\n\t\t\t});\n\t\t\tfrappe.call({\n\t\t\t\tmethod: \"eurocast.eurocast.purchase_receipt_euro.update_purchase_tax\",\n\t\t\t\targs: {\"docname\": frm.doc.name,\n\t\t\t\t        \"supplier\": frm.doc.supplier,\n\t\t\t\t\t\t\"document_no\":frm.doc.document_no,\n\t\t\t\t\t\t\"document_date\": frm.doc.document_date,\n\t\t\t\t        \"gate_inward\": cur_frm.doc.gate_inward\n\t\t\t\t},\n\t\t\t\tfreeze: true,\n\t\t\t\tcallback: function(r){\n\t\t\t\t\tif(r.message) {\n\t\t\t\t\t    frm.set_value(\"taxes_and_charges\",r.message);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t},\n\tgate_inward:function(frm,doc){\n\t    //update values to child table using frappe.call\n\t    frappe.call({\n\t\t\t\tmethod: \"eurocast.eurocast.purchase_receipt_euro.update_supplier_warehouse\",\n\t\t\t\targs: {\n\t\t\t\t        \"supplier\": frm.doc.supplier,\n\t\t\t\t        \"gate_inward\": cur_frm.doc.gate_inward,\n\t\t\t\t        \"document_date\":cur_frm.doc.document_date\n\t\t\t\t},\n\t\t\t\tfreeze: true,\n\t\t\t\tcallback: function(r){\n\t\t\t\t\tif(r.message) {\n                        frm.set_value(\"is_subcontracted\",r.message[0]);\n                        frm.set_value(\"supplier_warehouse\",r.message[1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t}\n});"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2021-05-24 14:37:20.245618",
  "name": "Purchase Order-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Purchase Order', {\n    purchase_type:function(frm, doc) {\n        //set value based on purchase type\n\t\tif (frm.doc.purchase_type=='Job Work'){\n\t\t    frm.set_value('is_subcontracted', \"Yes\");\n\t\t    frm.set_value('select_print_heading', 'Job Work');\n\t\t}\n\t\telse {\n\t\t    frm.set_value('is_subcontracted', 'No');\n\t\t}\n    },\n    validate: function(frm) {\n        //set value for purchase_order_no\n    \tfrm.set_value(\"purchase_order_no\",frm.doc.name);\n    \tcur_frm.refresh_field(\"purchase_order_no\");\n    \tcur_frm.refresh();\n\t}\n});\nfrappe.ui.form.on('Purchase Order', {\n    validate: function(frm) {\n        //set naming series based on purchase type\n        if (frm.doc.purchase_type === \"Purchase\"){\n            frm.doc.naming_series = \"PUR-ORD-.YYYY.-\";\n        }\n        if (frm.doc.purchase_type === \"Job Work\"){\n            frm.doc.naming_series = \"JOB-ORD-.YYYY.-\";\n        }\n        if (frm.doc.purchase_type === \"Service Order\"){\n            frm.doc.naming_series = \"SER-ORD-.YYYY.-\";\n        }\n\t},\n\tpurchase_type: function(frm){\n\t    //set filters based on purchase type\n\t    if(frm.doc.purchase_type == \"Purchase\"){\n    \t    frm.set_query(\"gate_inward\", function(doc){\n                return {\n                        \"filters\": {\n                            \"inward_types\": \"Purchase Order\",\n                            \"status\": \"Open\",\n                            \"supplier_name\": frm.doc.supplier\n                    }\n                };\n            });\n\t    }\n\t     if(frm.doc.purchase_type == \"Job Work\"){\n    \t        frm.set_query(\"gate_inward\", function(doc){\n                    return {\n                            \"filters\": {\n                                \"inward_types\": \"Job Work Order\",\n                                \"status\": \"Open\",\n                                \"supplier_name\": frm.doc.supplier\n                        }\n                    };\n                });\n\t     }\n\t},\n\trefresh: function(frm,doc){\n\t    //set filters based on purchase type\n\t    if(cur_frm.doc.purchase_type == \"Purchase\"){\n    \t    cur_frm.set_query(\"gate_inward\", function(doc){\n                return {\n                        \"filters\": {\n                            \"inward_types\": \"Purchase Order\",\n                            \"status\": \"Open\",\n                            \"supplier_name\": cur_frm.doc.supplier\n                    }\n                };\n            });\n\t    }\n\t     if(cur_frm.doc.purchase_type == \"Job Work\"){\n    \t        cur_frm.set_query(\"gate_inward\", function(doc){\n                    return {\n                            \"filters\": {\n                                \"inward_types\": \"Job Work Order\",\n                                \"status\": \"Open\",\n                                \"supplier_name\": cur_frm.doc.supplier\n                        }\n                    };\n                });\n\t     }\n\t}\n});\n\nfrappe.ui.form.on('Purchase Order', {\n    validate: function(frm) {\n        //set letter head based on purchase type\n        if (frm.doc.purchase_type === \"Purchase\"){\n            frm.doc.letter_head = \"LH - POEC\";\n        }\n        if (frm.doc.purchase_type === \"Job Work\"){\n            frm.doc.letter_head = \"LH - JO\";\n        }\n        if (frm.doc.purchase_type === \"Service Order\"){\n            frm.doc.letter_head = \"LH - SO\";\n        }\n\t}\n});\n\nfrappe.ui.form.on('Purchase Order', {\n    supplier:function(frm) {\n        //set buying price list based on supplier using frappe.call\n\t\tif (frm.doc.purchase_type=='Job Work'){\n\t\t    frappe.call({\n\t\t\t\t\"method\": \"eurocast.eurocast.purchase_receipt_euro.update_price_list\",\n\t\t\t\targs: {\"docname\": cur_frm.doc.name,\n\t\t\t\t        \"supplier\": cur_frm.doc.supplier\n\t\t\t\t},\n\t\t\t\tfreeze: true,\n\t\t\t\tcallback: function(r){\n\t\t\t\t\tif(!r.exc) {\n\t\t\t\t\t    //cur_frm.doc.set_value(\"buying_price_list\",null);\n\t\t\t\t\t\tcur_frm.set_value(\"buying_price_list\",r.message);\n\t\t\t\t\t\tcur_frm.refresh_field(\"buying_price_list\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\telse{\n\t\t    cur_frm.set_value(\"buying_price_list\",\"Standard Buying\");\n\t\t\tcur_frm.refresh_field(\"buying_price_list\");\n\t\t}\n    },\n    refresh: function(frm,cdt,cdn){\n        var d = locals[cdt][cdn];\n        //set price list in child table\n        if(frm.doc.buying_price_list != \"Standard Buying\"){\n            var rate = frappe.meta.get_docfield(\"Purchase Order Item\", \"rate\", cur_frm.doc.name);\n            rate.read_only = 1;\n            var price = frappe.meta.get_docfield(\"Purchase Order Item\", \"price_list_rate\", cur_frm.doc.name);\n            price.read_only = 1;\n            //var operation = frappe.meta.get_docfield(\"Purchase Order Item\", \"operation\", cur_frm.doc.name);\n            //operation.read_only = 0;\n        }\n        else{\n            var rate_n = frappe.meta.get_docfield(\"Purchase Order Item\", \"rate\", cur_frm.doc.name);\n            rate_n.read_only = 0;\n            var price_n = frappe.meta.get_docfield(\"Purchase Order Item\", \"price_list_rate\", cur_frm.doc.name);\n            price_n.read_only = 0;\n            //var operations = frappe.meta.get_docfield(\"Purchase Order Item\", \"operation\", cur_frm.doc.name);\n            //operations.read_only = 1;\n        }\n    }\n});\n\n\nfrappe.ui.form.on('Purchase Order Item', {\n\toperation:function(frm,cdt,cdn) {\n\t    //set price list based on operation\n\t    var d = locals[cdt][cdn];\n\t\tfrappe.call({\n\t\t\t\t\"method\": \"eurocast.eurocast.purchase_receipt_euro.update_price_rate\",\n\t\t\t\targs: {\n\t\t\t\t        \"price_list\": cur_frm.doc.buying_price_list,\n\t\t\t\t        \"item_code\": d.item_code,\n\t\t\t\t        \"operation\": d.operation\n\t\t\t\t},\n\t\t\t\tfreeze: true,\n\t\t\t\tcallback: function(r){\n\t\t\t\t\tif(r.message) {\n\t\t\t\t\t   frappe.model.set_value(cdt,cdn,\"rate\",r.message);\n\t\t\t\t\t   frappe.model.set_value(cdt,cdn,\"price_list_rate\",r.message);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tcur_frm.clear_table(\"supplied_items\");\n\t\t    cur_frm.refresh_field(\"supplied_items\");\n\t}\n});"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2021-05-24 11:54:24.629188",
  "name": "Sales Invoice-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Sales Invoice', {\n\tis_return: function(frm,doc) {\n\t    //filters for gate inward field\n\t\tif(frm.doc.is_return === 1){\n\t\t    //frm.set_df_property(\"gate_inward\",\"reqd\",1);\n\t\t    frm.set_query(\"gate_inward\", function(doc){\n                return {\n                        \"filters\": {\n                            \"customer_name\": frm.doc.customer,\n                            \"inward_types\": \"Customer Returns\",\n                            \"status\": \"Open\"\n                            \n                    }\n                };\n            });\n\t\t}\n\t\telse{\n\t\t    //frm.set_df_property(\"gate_inward\",\"reqd\",0);\n\t\t}\n\t},\n\tcustomer: function(frm,doc){\n\t    //set mandatory based on conditions\n\t    if((frm.doc.is_return === 0)&& (frm.doc.customer == \"Festo India Private Limited\" || frm.doc.customer == \"Greaves Cotton Limited\"\n    \t    || frm.doc.customer == \"IM Gears India Private Limited\" || frm.doc.customer == \"Lakshmi Machine Works Limited-I\"\n    \t    || frm.doc.customer == \"Lakshmi Machine Works Limited-II\" || frm.doc.customer == \"R.Stahl Private Limited\"\n    \t    || frm.doc.customer == \"Simpsons & Company Limited\")){\n    \t        frm.set_df_property(\"customer_ref_no\",\"reqd\",1);\n    \t    }\n    \t    else{\n    \t        frm.set_df_property(\"customer_ref_no\",\"reqd\",0);\n    \t    }\n\t},\n\tvalidate: function(frm,doc){\n\t    //set mandatory based on conditions\n\t    if((frm.doc.is_return === 0)&& (frm.doc.customer == \"Festo India Private Limited\" || frm.doc.customer == \"Greaves Cotton Limited\"\n    \t    || frm.doc.customer == \"IM Gears India Private Limited\" || frm.doc.customer == \"Lakshmi Machine Works Limited-I\"\n    \t    || frm.doc.customer == \"Lakshmi Machine Works Limited-II\" || frm.doc.customer == \"R.Stahl Private Limited\"\n    \t    || frm.doc.customer == \"Simpsons & Company Limited\")){\n    \t        frm.set_df_property(\"customer_ref_no\",\"reqd\",1);\n    \t    }\n    \t    else{\n    \t        frm.set_df_property(\"customer_ref_no\",\"reqd\",0);\n    \t    }\n    }\n});\n\nfrappe.ui.form.on('Sales Invoice', {\n    validate: function(frm,doc) {\n        //set letter head based on is return\n        if(frm.doc.is_return === 1){\n            frm.doc.letter_head = \"LH - CN\";\n        }\n\t\telse\n\t\t    {\n\t\t      frm.doc.letter_head = \"LH - SI\";  \n\t\t    }\n\t\t}\n});\n\n\nfrappe.ui.form.on('Sales Invoice Item', {\n\tqty: function(frm,cdt,cdn){\n\t    //calculate no of bins\n        let d = locals[cdt][cdn];\n        let total_no_of_bins = Math.ceil(d.qty /d.bin_qty);\n        frappe.model.set_value(cdt,cdn,\"total_no_of_bins\",total_no_of_bins);\n    },\n    form_render: function(frm,cdt,cdn){\n        let d = locals[cdt][cdn];\n        //calculate no of bins\n        let total_no_of_bins = Math.ceil(d.qty /d.bin_qty);\n        frappe.model.set_value(cdt,cdn,\"total_no_of_bins\",total_no_of_bins);\n    }\n});\n\n\nfrappe.ui.form.on(\"Sales Invoice\", \"refresh\", function(frm) {\n    //set route for stock entries list\n    frm.add_custom_button(__(\"View Stock Entries\"), function() {\n     frappe.route_options = {\n\t    \"sales_invoice\":frm.doc.name\n\t};\n     frappe.set_route(\"List\", \"Stock Entry\",\"List\");\n    }, __(\"Stock Entry\"));\n});\n\n\nfrappe.ui.form.on('Sales Invoice', {\n    validate: function(frm,doc) {\n        //set mandatory based on is return\n        if(frm.doc.is_return === 0){\n            frm.set_df_property(\"po_no\",\"reqd\",1);\n            frm.set_df_property(\"po_date\",\"reqd\",1);\n        }\n\t\telse{\n\t\t      frm.set_df_property(\"po_no\",\"reqd\",0);\n\t\t      frm.set_df_property(\"po_date\",\"reqd\",0);\n\t\t}\n\t},\n\t refresh: function(frm,doc) {\n\t    //set mandatory based on is return\n        if(frm.doc.is_return === 0){\n            frm.set_df_property(\"po_no\",\"reqd\",1);\n            frm.set_df_property(\"po_date\",\"reqd\",1);\n        }\n\t\telse{\n\t\t      frm.set_df_property(\"po_no\",\"reqd\",0);\n\t\t      frm.set_df_property(\"po_date\",\"reqd\",0);\n\t\t}\n\t}\n});\n\n\nfrappe.ui.form.on('Sales Invoice', {\n    validate: function(frm,doc){\n        //set naming series \n    \tif(frm.doc.is_return === 1){\n    \t    frm.doc.naming_series = \"ECE/SRT/2122/.#####\";\n    \t}\n\t}\n});\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Rejection Entry",
  "enabled": 1,
  "modified": "2021-05-24 14:47:32.374810",
  "name": "Rejection Entry-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Rejection Detail', {\n\tqty\t: function(frm,cdt,cdn) {\n\t    let rd = locals[cdt][cdn];\n\t    //calculate item value and item weight\n\t    let item_val = rd.qty * rd.value;\n\t    let item_wgt = rd.qty * rd.weight;\n\t    frappe.model.set_value(cdt,cdn,\"item_value\",item_val);\n\t    frappe.model.set_value(cdt,cdn,\"item_weight\",item_wgt);\n\t}\n});\n\n//Eurocast: Balakumar code\nfrappe.ui.form.on('Rejection Entry', {\n\tafter_save(frm) {\n\t\t// your code here\n\t\tvar rej_value=0;\n\t\tvar rej_weight=0;\n\t\tfor(var i=0;i<frm.doc.rejection_detail.length;i++){\n\t        rej_value+=parseFloat(frm.doc.rejection_detail[i].item_value);\n\t        rej_weight+=parseFloat(frm.doc.rejection_detail[i].item_weight);\n        }\n\t\tfrm.set_value('rejection_value', parseFloat(rej_value))\n\t\tfrm.set_value('rejection_weight', parseFloat(rej_weight))\n\t}\n})"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Supplier",
  "enabled": 1,
  "modified": "2021-05-24 14:48:10.679888",
  "name": "Supplier-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Supplier', {\n\trefresh: function(frm,doc){\n\t    //set filter for nx_job_work_price_list\n\t    frm.set_query(\"nx_job_work_price_list\", function(doc){\n        return {\n                \"filters\": {\n                    \"buying\": 1,\n                    \"nx_purchase_type\": \"Job Work\"\n                }\n            };\n        });\n\t}\n});"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Delivery Trip",
  "enabled": 1,
  "modified": "2021-05-24 14:46:42.819463",
  "name": "Delivery Trip-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Delivery Trip', {\n\tending_km:function(frm,doc) {\n\t    //calculate total distance\n\t\tlet total_distance = frm.doc.ending_km - frm.doc.starting_km;\n\t\tfrm.set_value(\"total_distance\",total_distance);\n\t},\n\trefresh: function(frm,doc){\n\t    //set filters\n\t    frm.fields_dict.customer_stop.grid.get_field('dc_no').get_query = function(doc,cdt,cdn) {\n\t\t    var d = locals[cdt][cdn];\n\t\t\treturn {\n\t\t\t\tfilters: [\n\t\t\t\t\t[\"Stock Entry\",\"customer\", \"=\", d.customer]\n\t\t\t\t\t//[\"Stock Entry\",\"delivery_trip_no\", \"=\", null]\n\t\t\t\t\t\n\t\t\t\t]\n\t\t\t};\n\t\t};\n\t\tfrm.fields_dict.customer_stop.grid.get_field('dc_no').get_query = function(doc,cdt,cdn) {\n\t\t    var d = locals[cdt][cdn];\n\t\t\treturn {\n\t\t\t\tfilters: [\n\t\t\t\t\t[\"Stock Entry\",\"customer\", \"=\", d.customer]\n\t\t\t\t\t//[\"Stock Entry\",\"delivery_trip_no\", \"=\", null]\n\t\t\t\t\t\n\t\t\t\t]\n\t\t\t};\n\t\t};\n\t\tfrm.fields_dict.delivery_stops.grid.get_field('invoice_no').get_query = function(doc,cdt,cdn) {\n\t\t    var d = locals[cdt][cdn];\n\t\t\treturn {\n\t\t\t\tfilters: [\n\t\t\t\t\t[\"Sales Invoice\",\"customer\", \"=\", d.customer]\n\t\t\t\t\t//[\"Stock Entry\",\"delivery_trip_no\", \"=\", null]\n\t\t\t\t\t\n\t\t\t\t]\n\t\t\t};\n\t\t};\n\t\tfrm.fields_dict.supplier_stops.grid.get_field('dc_no').get_query = function(doc,cdt,cdn) {\n\t\t    var d = locals[cdt][cdn];\n\t\t\treturn {\n\t\t\t\tfilters: [\n\t\t\t\t\t[\"Stock Entry\",\"supplier\", \"=\", d.supplier]\n\t\t\t\t\t//[\"Stock Entry\",\"delivery_trip_no\", \"=\", null]\n\t\t\t\t\t\n\t\t\t\t]\n\t\t\t};\n\t\t};\n\t},\n\tis_dc:function(frm,doc){\n\t    //set read only based on is_dc \n\t    if(frm.doc.is_dc === 1){\n\t        frm.set_df_property(\"delivery_stops\",\"read_only\",1);\n\t    }\n\t    else{\n\t         frm.set_df_property(\"delivery_stops\",\"read_only\",0);\n\t    }\n\t},\n\tgenerate_in_time: function(frm,doc){\n\t    //set in time\n    \tcur_frm.set_value(\"in_time\",frappe.datetime.now_datetime());\n\t}\n});\n\nfrappe.ui.form.on('Supplier Stops', {\n\tsupplier: function(frm,cdt,cdn) {\n\t    var d = locals[cdt][cdn];\n\t    //set address based on supplier\n\t\tif (d.supplier) {\n\t\t\tfrappe.call({\n\t\t\t\tmethod: \"eurocast.eurocast.delivery_trip.update_address\",\n\t\t\t\targs: { \"name\": d.supplier },\n\t\t\t\tcallback: function (r) {\n\t\t\t\t\tif (r.message) {\n\t\t\t\t\t    frappe.model.set_value(cdt, cdn, \"address\", r.message);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tfrappe.model.set_value(cdt, cdn, \"address\", '');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\taddress: function (frm, cdt, cdn) {\n\t\tvar row = locals[cdt][cdn];\n\t\t//set supplier address\n\t\tif (row.address) {\n\t\t\tfrappe.call({\n\t\t\t\tmethod: \"frappe.contacts.doctype.address.address.get_address_display\",\n\t\t\t\targs: { \"address_dict\": row.address },\n\t\t\t\tcallback: function (r) {\n\t\t\t\t\tif (r.message) {\n\t\t\t\t\t\tfrappe.model.set_value(cdt, cdn, \"supplier_address\", r.message);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tfrappe.model.set_value(cdt, cdn, \"supplier_address\", \"\");\n\t\t}\n\t}\n});\n\nfrappe.ui.form.on('Delivery Stop', {\n\tis_dc_no(frm,cdt,cdn) {\n\t    var d = locals[cdt][cdn];\n\t    //set read only for invoice no and set is invoice value based on is_dc_no\n\t\tif(d.is_dc_no === 1){\n\t\t    var invoice_no = frappe.meta.get_docfield(\"Delivery Stop\", \"invoice_no\", cur_frm.doc.name);\n            invoice_no.read_only = 1;\n            frappe.model.set_value(cdt,cdn,\"is_invoice\",0);\n\t\t}\n\t\telse{\n            var invoice_nos = frappe.meta.get_docfield(\"Delivery Stop\", \"invoice_no\", cur_frm.doc.name);\n            invoice_nos.read_only = 0;\n            frappe.model.set_value(cdt,cdn,\"is_invoice\",1);\n\t\t}\n\t},\n\tis_invoice(frm,cdt,cdn){\n\t    var d = locals[cdt][cdn];\n\t    //set read only for dc no value based on is invoice\n\t\tif(d.is_invoice === 1){\n            var dc_no = frappe.meta.get_docfield(\"Delivery Stop\", \"dc_no\", cur_frm.doc.name);\n            dc_no.read_only = 1;\n\t\t}\n\t\telse{\n\t\t    var dc_nos = frappe.meta.get_docfield(\"Delivery Stop\", \"dc_no\", cur_frm.doc.name);\n            dc_nos.read_only = 0;\n\t\t}\n\t}\n});\n\nfrappe.ui.form.on('Delivery Stop', {\n\tcustomer: function(frm,cdt,cdn) {\n\t    var d = locals[cdt][cdn];\n\t\tif (d.customer) {\n\t\t    //set address based on customer\n\t\t\tfrappe.call({\n\t\t\t\tmethod: \"eurocast.eurocast.delivery_trip.update_cus_address\",\n\t\t\t\targs: { \"name\": d.customer },\n\t\t\t\tcallback: function (r) {\n\t\t\t\t\tif (r.message) {\n\t\t\t\t\t    frappe.model.set_value(cdt, cdn, \"address\", r.message);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n});\n\nfrappe.ui.form.on('Customer Stop', {\n\tcustomer: function(frm,cdt,cdn) {\n\t    var d = locals[cdt][cdn];\n\t    ////set address based on customer\n\t\tif (d.customer) {\n\t\t\tfrappe.call({\n\t\t\t\tmethod: \"eurocast.eurocast.delivery_trip.update_cus_address\",\n\t\t\t\targs: { \"name\": d.customer },\n\t\t\t\tcallback: function (r) {\n\t\t\t\t\tif (r.message) {\n\t\t\t\t\t    frappe.model.set_value(cdt, cdn, \"address\", r.message);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\taddress: function (frm, cdt, cdn) {\n\t\tvar row = locals[cdt][cdn];\n\t\tif (row.address) {\n\t\t    //set customer address based on customer\n\t\t\tfrappe.call({\n\t\t\t\tmethod: \"frappe.contacts.doctype.address.address.get_address_display\",\n\t\t\t\targs: { \"address_dict\": row.address },\n\t\t\t\tcallback: function (r) {\n\t\t\t\t\tif (r.message) {\n\t\t\t\t\t\tfrappe.model.set_value(cdt, cdn, \"customer_address\", r.message);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tfrappe.model.set_value(cdt, cdn, \"customer_address\", \"\");\n\t\t}\n\t}\n});"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Serial No",
  "enabled": 1,
  "modified": "2021-05-24 14:40:02.215280",
  "name": "Serial No-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Serial No', {\n\tcomponent_type: function(frm,doc) {\n\t    //set mandatory based on component type\n\t\tif(frm.doc.component_type === \"Dye\"){\n\t\t    frm.set_df_property(\"cavity_value\",\"reqd\",1);\n\t\t}\n\t\telse{\n\t\t    frm.set_df_property(\"cavity_value\",\"reqd\",0);\n\t\t}\n\t}\n});"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2021-05-24 14:39:43.769099",
  "name": "Item-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Item', {\n\trefresh(frm,doc) {\n\t    //set filters\n\t\tfrm.set_query(\"bin_name\", function(doc){\n                return {\n                        \"filters\": {\n                            \"item_group\": \"Trays and Bins\"\n                    }\n                };\n            });\n\t}\n});"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2021-05-24 14:39:30.462408",
  "name": "Sales Order-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Sales Order Item', {\n\tqty: function(frm,cdt,cdn){\n        let d = locals[cdt][cdn];\n        //calculate total_no_of_bins\n        let total_no_of_bins = Math.ceil(d.qty /d.bin_qty);\n        frappe.model.set_value(cdt,cdn,\"total_no_of_bins\",total_no_of_bins);\n    },\n    form_render: function(frm,cdt,cdn){\n        let d = locals[cdt][cdn];\n        //calculate total_no_of_bins\n        let total_no_of_bins = Math.ceil(d.qty /d.bin_qty);\n        frappe.model.set_value(cdt,cdn,\"total_no_of_bins\",total_no_of_bins);\n    }\n});"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Quality Inspection",
  "enabled": 1,
  "modified": "2021-05-24 14:38:58.191386",
  "name": "Quality Inspection-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Quality Inspection', {\n\trefresh(frm) {\n\t    //set back button to return to Stock Entry\n\t    if(frm.stock_entry_ref_no !== null){\n    \t\tfrm.add_custom_button(__('Back'), () => {\n    \t\t    frappe.route_options = {'name': frm.doc.stock_entry_ref_no};\n\t\t\t\tfrappe.set_route(\"Form\",\"Stock Entry\",frm.doc.stock_entry_ref_no);\n    \t\t});\n\t    }\n\t}\n});"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2021-05-24 11:49:53.941983",
  "name": "Employee-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Employee', {\n\tdepartment: function(frm,doc) {\n\t    //set values based on department\n\t\tif(frm.doc.department === \"PRODUCTION - ECE\"){\n\t\t    frm.set_value(\"operation\",\"PDC\");\n\t\t}\n\t\tif(frm.doc.department === \"MACHINING - ECE\"){\n\t\t    frm.set_value(\"operation\",\"MACHINING\");\n\t\t}\n\t},\n\trefresh:function(frm,doc){\n\t    //set filters in child table\n\t    frm.fields_dict.issued_items.grid.get_field('items').get_query = function(doc,cdt,cdn) {\n\t\t    var d = locals[cdt][cdn];\n\t\t\treturn {\n\t\t\t\tfilters: [\n\t\t\t\t\t[\"Item\",\"item_group\", \"=\", \"Uniform & PPE Consumables\"]\n\t\t\t\t]\n\t\t\t};\n\t\t};\n\t},\n\tnaming_series: function(frm,doc) {\n\t   if(frm.doc.naming_series){\n\t    //set naming series based on employee series\n    \t frappe.call({\n    \t\t\t\tmethod: \"eurocast.eurocast.purchase_order.update_employee_series\",\n    \t\t\t\targs: {\"docname\": frm.doc.name,\n    \t\t\t\t       \"naming_series\":frm.doc.naming_series,\n    \t\t\t\t       \"status\":frm.doc.status\n    \t\t\t\t},\n    \t\t\t\tfreeze: true,\n    \t\t\t\tcallback: function(r){\n    \t\t\t\t\tif (r.message) {\n    \t\t\t\t\t    frm.set_value(\"nx_last_series\", r.message);\n    \t\t\t\t\t}\n    \t\t\t\t}\n    \t\t\t});\n    \t }\n    \t}\n\t/*\tnaming_series:function(frm,doc) {\n\t if(frm.doc.naming_series){\n\t frappe.call({\n\t\t\t\tmethod: \"eurocast.eurocast.purchase_order.update_employee_series\",\n\t\t\t\targs: {\"docname\": frm.doc.name,\n\t\t\t\t       \"naming_series\":frm.doc.naming_series\n\t\t\t\t},\n\t\t\t\tfreeze: true,\n\t\t\t\tcallback: function(r){\n\t\t\t\t\tif (r.message) {\n\t\t\t\t\t    frm.set_value(\"nx_last_series\", r.message);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t }\n\t}*/\n});"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Final Inspection Entry",
  "enabled": 1,
  "modified": "2021-05-24 14:38:13.548490",
  "name": "Final Inspection Entry-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Final Inspection Entry', {\n   shift : function(frm,doc){\n       //set total time based on shift\n       var zero = 0;\n        cur_frm.set_value(\"total_time\", zero );\n\t    var totalcaltime = frm.doc.shift_time_min + frm.doc.over_time_min;\n\t    cur_frm.set_value(\"total_time\", totalcaltime );\n\t    refresh_field(\"total_time\");\n\t},\n\tover_time_min : function(frm,doc){\n\t    //set total time based on over_time_min\n\t    var totalcaltime = frm.doc.shift_time_min + frm.doc.over_time_min;\n\t    cur_frm.set_value(\"total_time\", totalcaltime );\n\t    refresh_field(\"total_time\");\n\t},\n\t\n\t\n})"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Die Setting",
  "enabled": 1,
  "modified": "2021-05-24 11:50:28.530378",
  "name": "Die Setting-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "//below codes written by BK sir\nfrappe.ui.form.on('Die Setting', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tvar entry_datetime = frm.doc.start_date_time.split(\" \")[1];\n        var exit_datetime = frm.doc.end_date_time.split(\" \")[1];\n        var hour=0;\n        var minute=0;\n        var second=0;\n        var startdate = Date.parse(frm.doc.start_date_time.split(\" \")[0]);\n        var enddate = Date.parse(frm.doc.end_date_time.split(\" \")[0]);\n        var splitEntryDatetime= entry_datetime.split(':');\n        var splitExitDatetime= exit_datetime.split(':');\n        \n        hour = (parseInt(splitExitDatetime[0])-parseInt(splitEntryDatetime[0]));\n        minute = (parseInt(splitExitDatetime[1]) - parseInt(splitEntryDatetime[1]));\n        hour = hour + Math.floor(minute/60);\n        minute = minute%60;\n        second = (parseInt(splitExitDatetime[2])-parseInt(splitEntryDatetime[2]));\n        minute = minute + Math.floor(second/60);\n        \n        frm.set_value(\"actual_die_change_time\",frappe.datetime.get_diff(enddate, startdate)*24*60+hour*60+minute);\n        frm.set_value(\"total_delay_time\",frm.doc.actual_die_change_time - frm.doc.die_loading_target_time);\n        \n        var totaldelay = 0;\n        for(var i =0; i < frm.doc.die_setting_delay_details.length; i++) {\n            totaldelay += frm.doc.die_setting_delay_details[i].delay_time;\n            \n        }\n        frm.set_value(\"accounted_delay_time\",totaldelay);\n        \n        return true;\n        //if(frm.doc.accounted_delay_time != frm.doc.total_delay_time)\n            //frappe.msgprint('Delay time provided does not tally with actual delay.');\n\t},\n\tonload(frm) {\n\t\t// your code here\n\t\tfrm.fields_dict['load_die_name'].get_query = function(doc) {             \n        return{\t\t\n\t\t\t\t\"filters\": [\n\t\t\t\t\t[\"Item\",\"item_group\", \"=\", \"Dies\"]\n\t\t\t\t]\n            }\n        };\n\n\t\tfrm.fields_dict['unloading_die_name'].get_query = function(doc) {             \n        return{\t\t\n\t\t\t\t\"filters\": [\n\t\t\t\t\t[\"Item\",\"item_group\", \"=\", \"Dies\"]\n\t\t\t\t]\n            }\n        };\n        \n        return true;\n\t}\n})\n\nfrappe.ui.form.on(\"Die Setting\", {\n\tbefore_submit(frm) {\n        if(frm.doc.accounted_delay_time != frm.doc.total_delay_time){\n            frappe.throw('Delay time provided does not tally with actual delay.');\n            return false;\n        }\n        return true;\n\t}\n})\n\n/*frappe.ui.form.on(\"Die Break Down Details\", {\n\tdie_setting_delay_details_remove(frm, cdt, cdn){\n\t},\n\tdie_setting_delay_details_add(frm, cdt, cdn){\n        var totaldelay = 0;\n        for(var i =0; i < frm.doc.die_setting_delay_details.length; i++) {\n            totaldelay += frm.doc.die_setting_delay_details[i].delay_time;\n            \n        }\n        frm.set_value(\"accounted_delay_time\",totaldelay);\n        //frm.set_value(\"accounted_delay_time\",1033);\n\t}\n})*/\n\n"
 }
]